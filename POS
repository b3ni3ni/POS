<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coffee Haven POS System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .grid-cell {
            min-height: 40px;
            border: 1px solid #e5e7eb;
            padding: 8px;
            font-size: 14px;
        }
        .grid-header {
            background-color: #f3f4f6;
            font-weight: 600;
            text-align: center;
        }
        .selected-cell {
            background-color: #dbeafe;
            border: 2px solid #3b82f6;
        }
        .scroll-container {
            scrollbar-width: thin;
            scrollbar-color: #cbd5e1 #f1f5f9;
        }
        .scroll-container::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        .scroll-container::-webkit-scrollbar-track {
            background: #f1f5f9;
        }
        .scroll-container::-webkit-scrollbar-thumb {
            background-color: #cbd5e1;
            border-radius: 4px;
        }
        .receipt {
            font-family: 'Courier New', Courier, monospace;
        }
        .blink {
            animation: blink-animation 1s steps(5, start) infinite;
        }
        @keyframes blink-animation {
            to { visibility: hidden; }
        }
        .payment-method {
            transition: all 0.2s ease;
        }
        .payment-method.selected {
            background-color: #3b82f6;
            color: white;
            border-color: #3b82f6;
        }
        .payment-method.selected i {
            color: white;
        }
        .history-item:hover {
            background-color: #f8fafc;
        }
        .tab-button {
            transition: all 0.2s ease;
        }
        .tab-button.active {
            background-color: #3b82f6;
            color: white;
        }
    </style>
</head>
<body class="bg-gray-50">
    <div class="container mx-auto px-4 py-6">
        <!-- Header -->
        <header class="flex justify-between items-center mb-6">
            <div class="flex items-center">
                <i class="fas fa-coffee text-3xl text-amber-700 mr-3"></i>
                <h1 class="text-2xl font-bold text-gray-800">Croffle Corner POS</h1>
            </div>
            <div class="flex items-center space-x-4">
                <div class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                    <i class="fas fa-user mr-1"></i> Admin
                </div>
                <div id="current-time" class="text-gray-600"></div>
            </div>
        </header>

        <!-- Main Content -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Left Column - Menu Items -->
            <div class="lg:col-span-1 bg-white rounded-lg shadow p-4">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-lg font-semibold text-gray-800">Menu Items</h2>
                    <div class="relative">
                        <input type="text" placeholder="Search menu..." class="pl-8 pr-4 py-2 border rounded-lg text-sm w-full" id="menu-search">
                        <i class="fas fa-search absolute left-3 top-3 text-gray-400"></i>
                    </div>
                </div>
                
                <div class="grid grid-cols-2 gap-3 mb-4">
                    <button class="category-btn bg-amber-200 text-amber-800 px-3 py-2 rounded-lg text-sm font-medium" data-category="all">All Items</button>
                    <button class="category-btn bg-amber-100 text-amber-800 px-3 py-2 rounded-lg text-sm font-medium", data-category="coffee">Coffee</button>
                    <button class="category-btn bg-amber-100 text-amber-800 px-3 py-2 rounded-lg text-sm font-medium", data-category="tea">Tea</button>
                    <button class="category-btn bg-amber-100 text-amber-800 px-3 py-2 rounded-lg text-sm font-medium", data-category="food">Food</button>
                </div>
                
                <div class="overflow-y-auto h-96 scroll-container" id="menu-items">
                    <!-- Menu items will be populated here by JavaScript -->
                </div>
            </div>

            <!-- Middle Column - Order and Inventory -->
            <div class="lg:col-span-1 bg-white rounded-lg shadow p-4">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-lg font-semibold text-gray-800">Current Order</h2>
                    <div class="flex space-x-2">
                        <button id="clear-order", class="bg-red-100 text-red-700 px-3 py-1 rounded-lg text-sm">
                            <i class="fas fa-trash mr-1"></i> Clear
                        </button>
                    </div>
                </div>
                
                <div class="mb-4">
                    <div class="grid grid-cols-6 gap-1 mb-1 grid-header">
                        <div class="grid-cell">Qty</div>
                        <div class="grid-cell col-span-3">Item</div>
                        <div class="grid-cell">Price</div>
                        <div class="grid-cell">Total</div>
                    </div>
                    <div class="overflow-y-auto h-48 scroll-container" id="order-items">
                        <!-- Order items will be populated here by JavaScript -->
                    </div>
                </div>
                
                <div class="border-t pt-3">
                    <div class="flex justify-between font-bold text-lg">
                        <span>Total:</span>
                        <span id="total">$0.00</span>
                    </div>
                </div>

                <!-- Payment Method Selection -->
                <div class="mt-4 mb-4">
                    <h3 class="text-sm font-medium text-gray-700 mb-2">Payment Method</h3>
                    <div class="grid grid-cols-3 gap-2">
                        <div class="payment-method border rounded-lg p-2 text-center cursor-pointer", data-method="cash">
                            <i class="fas fa-money-bill-wave text-green-500 text-xl mb-1"></i>
                            <div class="text-xs font-medium">Cash</div>
                        </div>
                        <div class="payment-method border rounded-lg p-2 text-center cursor-pointer", data-method="card">
                            <i class="fas fa-credit-card text-blue-500 text-xl mb-1"></i>
                            <div class="text-xs font-medium">Card</div>
                        </div>
                        <div class="payment-method border rounded-lg p-2 text-center cursor-pointer", data-method="gcash">
                            <i class="fas fa-mobile-alt text-purple-500 text-xl mb-1"></i>
                            <div class="text-xs font-medium">GCash/Maya</div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-2 grid grid-cols-2 gap-3">
                    <button id="checkout-btn", class="bg-green-600 hover:bg-green-700 text-white py-3 rounded-lg font-medium flex items-center justify-center">
                        <i class="fas fa-cash-register mr-2"></i> Checkout
                    </button>
                    <button id="inventory-btn", class="bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-lg font-medium flex items-center justify-center">
                        <i class="fas fa-boxes mr-2"></i> Inventory
                    </button>
                </div>
            </div>

            <!-- Right Column - Receipt, Inventory and History -->
            <div class="lg:col-span-1">
                <!-- Tabs -->
                <div class="flex mb-4 bg-white rounded-lg shadow overflow-hidden">
                    <button class="tab-button flex-1 py-2 font-medium text-center active" data-tab="receipt">
                        <i class="fas fa-receipt mr-1"></i> Receipt
                    </button>
                    <button class="tab-button flex-1 py-2 font-medium text-center" data-tab="history">
                        <i class="fas fa-history mr-1"></i> History
                    </button>
                </div>

                <!-- Receipt Panel -->
                <div id="receipt-panel", class="bg-white rounded-lg shadow p-4">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-lg font-semibold text-gray-800">Receipt</h2>
                        <button id="print-receipt", class="bg-gray-100 hover:bg-gray-200 text-gray-800 px-3 py-1 rounded-lg text-sm">
                            <i class="fas fa-print mr-1"></i> Print
                        </button>
                    </div>
                    <div class="receipt bg-gray-50 p-4 rounded-lg" id="receipt-content">
                        <div class="text-center mb-4">
                            <h3 class="font-bold text-lg">Croffle Croner</h3>
                            <p class="text-sm">Some where in Pangasinan</p>
                            <p class="text-sm">Tel: 09308634229</p>
                        </div>
                        <div class="border-b border-gray-300 mb-2"></div>
                        <div class="text-xs mb-2">
                            <div class="flex justify-between">
                                <span>Date:</span>
                                <span id="receipt-date">2023-06-15 14:30</span>
                            </div>
                            <div class="flex justify-between">
                                <span>Order #:</span>
                                <span id="receipt-order-number">1001</span>
                            </div>
                            <div class="flex justify-between">
                                <span>Payment Method:</span>
                                <span id="receipt-payment-method">Cash</span>
                            </div>
                        </div>
                        <div class="border-b border-gray-300 mb-2"></div>
                        <div class="text-xs mb-4" id="receipt-items">
                            <!-- Receipt items will be populated here by JavaScript -->
                        </div>
                        <div class="border-b border-gray-300 mb-2"></div>
                        <div class="text-xs mb-2">
                            <div class="flex justify-between font-bold">
                                <span>Total:</span>
                                <span id="receipt-total">$0.00</span>
                            </div>
                        </div>
                        <div class="text-center mt-4 text-xs">
                            <p>Thank you for visiting!</p>
                            <p>Please come again</p>
                        </div>
                    </div>
                </div>

                <!-- History Panel (hidden by default) -->
                <div id="history-panel", class="bg-white rounded-lg shadow p-4 hidden">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-lg font-semibold text-gray-800">Transaction History</h2>
                        <div class="flex space-x-2">
                            <button id="refresh-history", class="bg-gray-100 hover:bg-gray-200 text-gray-800 px-3 py-1 rounded-lg text-sm">
                                <i class="fas fa-sync-alt mr-1"></i> Refresh
                            </button>
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <div class="grid grid-cols-6 gap-1 mb-1 grid-header">
                            <div class="grid-cell">Date</div>
                            <div class="grid-cell">Order #</div>
                            <div class="grid-cell">Items</div>
                            <div class="grid-cell">Payment</div>
                            <div class="grid-cell">Total</div>
                            <div class="grid-cell">Actions</div>
                        </div>
                        <div class="overflow-y-auto h-96 scroll-container" id="history-items">
                            <!-- History items will be populated here by JavaScript -->
                        </div>
                    </div>
                    
                    <div class="border-t pt-3">
                        <div class="flex justify-between items-center">
                            <div class="text-sm text-gray-600">
                                Showing <span id="history-count">0</span> transactions
                            </div>
                            <div class="flex space-x-2">
                                <button id="prev-history", class="bg-gray-100 hover:bg-gray-200 text-gray-800 px-3 py-1 rounded-lg text-sm disabled:opacity-50" disabled>
                                    <i class="fas fa-chevron-left mr-1"></i> Prev
                                </button>
                                <button id="next-history", class="bg-gray-100 hover:bg-gray-200 text-gray-800 px-3 py-1 rounded-lg text-sm disabled:opacity-50" disabled>
                                    Next <i class="fas fa-chevron-right ml-1"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Inventory Panel (hidden by default) -->
                <div id="inventory-panel", class="bg-white rounded-lg shadow p-4 hidden">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-lg font-semibold text-gray-800">Inventory Management</h2>
                        <div class="flex space-x-2">
                            <button id="close-inventory", class="bg-gray-100 hover:bg-gray-200 text-gray-800 px-3 py-1 rounded-lg text-sm">
                                <i class="fas fa-times mr-1"></i> Close
                            </button>
                            <button id="add-inventory-item", class="bg-green-100 hover:bg-green-200 text-green-800 px-3 py-1 rounded-lg text-sm">
                                <i class="fas fa-plus mr-1"></i> Add
                            </button>
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <div class="grid grid-cols-8 gap-1 mb-1 grid-header">
                            <div class="grid-cell">ID</div>
                            <div class="grid-cell col-span-2">Item</div>
                            <div class="grid-cell">Category</div>
                            <div class="grid-cell">Price</div>
                            <div class="grid-cell">Stock</div>
                            <div class="grid-cell">Alert</div>
                            <div class="grid-cell">Actions</div>
                        </div>
                        <div class="overflow-y-auto h-64 scroll-container" id="inventory-items">
                            <!-- Inventory items will be populated here by JavaScript -->
                        </div>
                    </div>
                    
                    <!-- Ingredients Section -->
                    <div class="mt-6">
                        <h3 class="text-lg font-semibold text-gray-800 mb-4">Ingredients</h3>
                        <div class="grid grid-cols-4 gap-1 mb-1 grid-header">
                            <div class="grid-cell">Ingredient</div>
                            <div class="grid-cell">Stock</div>
                            <div class="grid-cell">Status</div>
                            <div class="grid-cell">Actions</div>
                        </div>
                        <div class="overflow-y-auto h-64 scroll-container" id="ingredients-items">
                            <!-- Ingredients will be populated here by JavaScript -->
                        </div>
                    </div>
                    
                    <div class="border-t pt-3">
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <h3 class="font-medium mb-2">Low Stock Items</h3>
                                <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-3 text-sm" id="low-stock-items">
                                    <!-- Low stock items will be populated here by JavaScript -->
                                </div>
                            </div>
                            <div>
                                <h3 class="font-medium mb-2">Inventory Summary</h3>
                                <div class="bg-blue-50 border border-blue-200 rounded-lg p-3 text-sm">
                                    <div class="flex justify-between mb-1">
                                        <span>Total Items:</span>
                                        <span id="total-items">0</span>
                                    </div>
                                    <div class="flex justify-between mb-1">
                                        <span>Out of Stock:</span>
                                        <span id="out-of-stock">0</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span>Low Stock:</span>
                                        <span id="low-stock">0</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add/Edit Inventory Item Modal -->
    <div id="inventory-modal", class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
            <div class="flex justify-between items-center border-b px-6 py-4">
                <h3 class="text-lg font-semibold" id="modal-title">Add Inventory Item</h3>
                <button id="close-modal", class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="p-6">
                <form id="inventory-form">
                    <input type="hidden" id="item-id">
                    <div class="mb-4">
                        <label for="item-name", class="block text-sm font-medium text-gray-700 mb-1">Item Name</label>
                        <input type="text" id="item-name", class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    </div>
                    <div class="mb-4">
                        <label for="item-category", class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                        <select id="item-category", class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="coffee">Coffee</option>
                            <option value="tea">Tea</option>
                            <option value="food">Food</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="grid grid-cols-2 gap-4 mb-4">
                        <div>
                            <label for="item-price", class="block text-sm font-medium text-gray-700 mb-1">Price ($)</label>
                            <input type="number" step="0.01" id="item-price", class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label for="item-cost", class="block text-sm font-medium text-gray-700 mb-1">Cost ($)</label>
                            <input type="number" step="0.01" id="item-cost", class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                    </div>
                    <div class="grid grid-cols-2 gap-4 mb-4">
                        <div>
                            <label for="item-stock", class="block text-sm font-medium text-gray-700 mb-1">Current Stock</label>
                            <input type="number" id="item-stock", class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                        <div>
                            <label for="item-alert", class="block text-sm font-medium text-gray-700 mb-1">Low Stock Alert</label>
                            <input type="number" id="item-alert", class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                    </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Ingredients</label>
                        <div id="ingredients-container" class="space-y-2">
                            <!-- Ingredients will be added here dynamically -->
                        </div>
                        <button type="button" id="add-ingredient-btn" class="mt-2 text-sm text-blue-600 hover:text-blue-800">
                            <i class="fas fa-plus mr-1"></i> Add Ingredient
                        </button>
                    </div>
                </form>
            </div>
            <div class="border-t px-6 py-4 flex justify-end space-x-3">
                <button id="cancel-modal", class="px-4 py-2 border rounded-lg text-gray-700 hover:bg-gray-100">Cancel</button>
                <button id="save-item", class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Save Item</button>
            </div>
        </div>
    </div>

    <!-- View Receipt Modal -->
    <div id="receipt-modal", class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md">
            <div class="flex justify-between items-center border-b px-6 py-4">
                <h3 class="text-lg font-semibold">Order Receipt</h3>
                <button id="close-receipt-modal", class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="p-6">
                <div class="receipt bg-gray-50 p-4 rounded-lg" id="modal-receipt-content">
                    <!-- Receipt content will be populated here by JavaScript -->
                </div>
            </div>
            <div class="border-t px-6 py-4 flex justify-end space-x-3">
                <button id="print-modal-receipt", class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
                    <i class="fas fa-print mr-2"></i> Print
                </button>
                <button id="close-receipt-modal-btn", class="px-4 py-2 border rounded-lg text-gray-700 hover:bg-gray-100">Close</button>
            </div>
        </div>
    </div>

    <script>
        // Data structure for the POS system
        let menuItems = [];
        let ingredients = [];
        let currentOrder = [];
        let orderNumber = 1001;
        let currentEditingItem = null;
        let selectedPaymentMethod = 'cash'; // Default payment method
        let transactionHistory = [];
        let historyPage = 1;
        const HISTORY_PER_PAGE = 10;

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            loadData();
            initApp();
        });

        // Load data from localStorage
        function loadData() {
            // Load menu items
            const savedMenuItems = localStorage.getItem('coffeeHavenMenuItems');
            if (savedMenuItems) {
                menuItems = JSON.parse(savedMenuItems);
            } else {
                // Default menu items if none saved
                menuItems = [
                    { 
                        id: 1, 
                        name: "Espresso", 
                        category: "coffee", 
                        price: 3.50, 
                        stock: 50, 
                        alert: 10, 
                        ingredients: [
                            { name: "Coffee Beans", quantity: 10 }, // 10g per serving
                            { name: "Water", quantity: 200 }       // 200ml per serving
                        ] 
                    },
                    { 
                        id: 2, 
                        name: "Americano", 
                        category: "coffee", 
                        price: 4.00, 
                        stock: 45, 
                        alert: 10,
                        ingredients: [
                            { name: "Coffee Beans", quantity: 10 },
                            { name: "Water", quantity: 300 }
                        ]
                    },
                    { 
                        id: 3, 
                        name: "Cappuccino", 
                        category: "coffee", 
                        price: 4.50, 
                        stock: 40, 
                        alert: 10,
                        ingredients: [
                            { name: "Coffee Beans", quantity: 10 },
                            { name: "Milk", quantity: 150 },
                            { name: "Water", quantity: 100 }
                        ]
                    },
                    { 
                        id: 4, 
                        name: "Latte", 
                        category: "coffee", 
                        price: 4.75, 
                        stock: 38, 
                        alert: 10,
                        ingredients: [
                            { name: "Coffee Beans", quantity: 10 },
                            { name: "Milk", quantity: 200 },
                            { name: "Water", quantity: 50 }
                        ]
                    },
                    { 
                        id: 5, 
                        name: "Mocha", 
                        category: "coffee", 
                        price: 5.00, 
                        stock: 35, 
                        alert: 10,
                        ingredients: [
                            { name: "Coffee Beans", quantity: 10 },
                            { name: "Milk", quantity: 150 },
                            { name: "Chocolate Syrup", quantity: 30 },
                            { name: "Water", quantity: 50 }
                        ]
                    },
                    { 
                        id: 6, 
                        name: "Green Tea", 
                        category: "tea", 
                        price: 3.00, 
                        stock: 30, 
                        alert: 5,
                        ingredients: [
                            { name: "Green Tea Leaves", quantity: 5 },
                            { name: "Water", quantity: 250 }
                        ]
                    },
                    { 
                        id: 7, 
                        name: "Black Tea", 
                        category: "tea", 
                        price: 3.00, 
                        stock: 30, 
                        alert: 5,
                        ingredients: [
                            { name: "Black Tea Leaves", quantity: 5 },
                            { name: "Water", quantity: 250 }
                        ]
                    },
                    { 
                        id: 8, 
                        name: "Chai Latte", 
                        category: "tea", 
                        price: 4.50, 
                        stock: 25, 
                        alert: 5,
                        ingredients: [
                            { name: "Chai Tea Mix", quantity: 15 },
                            { name: "Milk", quantity: 200 }
                        ]
                    },
                    { 
                        id: 9, 
                        name: "Croissant", 
                        category: "food", 
                        price: 3.50, 
                        stock: 20, 
                        alert: 5,
                        ingredients: [
                            { name: "Croissant", quantity: 1 }
                        ]
                    },
                    { 
                        id: 10, 
                        name: "Blueberry Muffin", 
                        category: "food", 
                        price: 3.75, 
                        stock: 18, 
                        alert: 5,
                        ingredients: [
                            { name: "Blueberry Muffin", quantity: 1 }
                        ]
                    },
                    { 
                        id: 11, 
                        name: "Bagel", 
                        category: "food", 
                        price: 3.00, 
                        stock: 15, 
                        alert: 5,
                        ingredients: [
                            { name: "Bagel", quantity: 1 }
                        ]
                    },
                    { 
                        id: 12, 
                        name: "Sandwich", 
                        category: "food", 
                        price: 6.50, 
                        stock: 12, 
                        alert: 5,
                        ingredients: [
                            { name: "Bread", quantity: 2 },
                            { name: "Cheese", quantity: 30 },
                            { name: "Ham", quantity: 50 },
                            { name: "Lettuce", quantity: 10 },
                            { name: "Tomato", quantity: 20 }
                        ]
                    }
                ];
                saveMenuItems();
            }

            // Load ingredients
            const savedIngredients = localStorage.getItem('coffeeHavenIngredients');
            if (savedIngredients) {
                ingredients = JSON.parse(savedIngredients);
            } else {
                // Default ingredients if none saved
                ingredients = [
                    { id: 1, name: "Coffee Beans", stock: 1000, alert: 200, unit: "g" },
                    { id: 2, name: "Milk", stock: 5000, alert: 1000, unit: "ml" },
                    { id: 3, name: "Water", stock: 10000, alert: 2000, unit: "ml" },
                    { id: 4, name: "Chocolate Syrup", stock: 500, alert: 100, unit: "ml" },
                    { id: 5, name: "Green Tea Leaves", stock: 200, alert: 50, unit: "g" },
                    { id: 6, name: "Black Tea Leaves", stock: 200, alert: 50, unit: "g" },
                    { id: 7, name: "Chai Tea Mix", stock: 300, alert: 75, unit: "g" },
                    { id: 8, name: "Croissant", stock: 20, alert: 5, unit: "each" },
                    { id: 9, name: "Blueberry Muffin", stock: 18, alert: 5, unit: "each" },
                    { id: 10, name: "Bagel", stock: 15, alert: 5, unit: "each" },
                    { id: 11, name: "Bread", stock: 30, alert: 10, unit: "slices" },
                    { id: 12, name: "Cheese", stock: 1000, alert: 200, unit: "g" },
                    { id: 13, name: "Ham", stock: 800, alert: 200, unit: "g" },
                    { id: 14, name: "Lettuce", stock: 500, alert: 100, unit: "g" },
                    { id: 15, name: "Tomato", stock: 600, alert: 150, unit: "g" }
                ];
                saveIngredients();
            }

            // Load current order
            const savedOrder = localStorage.getItem('coffeeHavenCurrentOrder');
            if (savedOrder) {
                currentOrder = JSON.parse(savedOrder);
            }

            // Load transaction history
            const savedHistory = localStorage.getItem('coffeeHavenTransactionHistory');
            if (savedHistory) {
                transactionHistory = JSON.parse(savedHistory);
            }

            // Load order number
            const savedOrderNumber = localStorage.getItem('coffeeHavenOrderNumber');
            if (savedOrderNumber) {
                orderNumber = parseInt(savedOrderNumber);
            }

            // Load settings
            const savedSettings = localStorage.getItem('coffeeHavenSettings');
            if (savedSettings) {
                const settings = JSON.parse(savedSettings);
                selectedPaymentMethod = settings.selectedPaymentMethod || 'cash';
            }
        }

        // Save data to localStorage
        function saveMenuItems() {
            localStorage.setItem('coffeeHavenMenuItems', JSON.stringify(menuItems));
        }

        function saveIngredients() {
            localStorage.setItem('coffeeHavenIngredients', JSON.stringify(ingredients));
        }

        function saveCurrentOrder() {
            localStorage.setItem('coffeeHavenCurrentOrder', JSON.stringify(currentOrder));
        }

        function saveTransactionHistory() {
            localStorage.setItem('coffeeHavenTransactionHistory', JSON.stringify(transactionHistory));
        }

        function saveOrderNumber() {
            localStorage.setItem('coffeeHavenOrderNumber', orderNumber.toString());
        }

        function saveSettings() {
            const settings = {
                selectedPaymentMethod: selectedPaymentMethod
            };
            localStorage.setItem('coffeeHavenSettings', JSON.stringify(settings));
        }

        function initApp() {
            updateCurrentTime();
            setInterval(updateCurrentTime, 60000); // Update time every minute
            
            renderMenuItems();
            renderOrderItems();
            updateOrderSummary();
            renderReceipt();
            renderInventoryItems();
            renderIngredients();
            updateInventorySummary();
            renderHistoryItems();
            
            // Initialize payment method selection
            setupPaymentMethods();
            
            // Event listeners for static elements
            document.getElementById('checkout-btn').addEventListener('click', checkoutOrder);
            document.getElementById('clear-order').addEventListener('click', clearOrder);
            document.getElementById('inventory-btn').addEventListener('click', showInventoryPanel);
            document.getElementById('close-inventory').addEventListener('click', showReceiptPanel);
            document.getElementById('add-inventory-item').addEventListener('click', showAddItemModal);
            document.getElementById('print-receipt').addEventListener('click', printReceipt);
            document.getElementById('menu-search').addEventListener('input', filterMenuItems);
            document.querySelectorAll('.category-btn').forEach(btn => {
                btn.addEventListener('click', filterByCategory);
            });
            document.getElementById('close-modal').addEventListener('click', closeModal);
            document.getElementById('cancel-modal').addEventListener('click', closeModal);
            document.getElementById('save-item').addEventListener('click', saveInventoryItem);
            document.getElementById('refresh-history').addEventListener('click', renderHistoryItems);
            document.getElementById('prev-history').addEventListener('click', prevHistoryPage);
            document.getElementById('next-history').addEventListener('click', nextHistoryPage);
            document.getElementById('close-receipt-modal').addEventListener('click', closeReceiptModal);
            document.getElementById('close-receipt-modal-btn').addEventListener('click', closeReceiptModal);
            document.getElementById('print-modal-receipt').addEventListener('click', printModalReceipt);
            document.getElementById('add-ingredient-btn').addEventListener('click', addIngredientField);

            // Tab switching
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.addEventListener('click', switchTab);
            });
        }

        // Add ingredient field to modal
        function addIngredientField(ingredient = { name: '', quantity: '' }) {
            const container = document.getElementById('ingredients-container');
            const ingredientId = Date.now(); // Unique ID for each ingredient field
            
            const ingredientDiv = document.createElement('div');
            ingredientDiv.className = 'flex items-center space-x-2';
            ingredientDiv.dataset.id = ingredientId;
            
            ingredientDiv.innerHTML = `
                <select class="ingredient-name flex-1 px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="">Select Ingredient</option>
                    ${ingredients.map(ing => 
                        `<option value="${ing.name}" ${ing.name === ingredient.name ? 'selected' : ''}>${ing.name}</option>`
                    ).join('')}
                </select>
                <input type="number" class="ingredient-quantity w-20 px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" 
                    placeholder="Qty" value="${ingredient.quantity || ''}">
                <button type="button" class="remove-ingredient px-2 text-red-600 hover:text-red-800">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            container.appendChild(ingredientDiv);
            
            // Add event listener for remove button
            ingredientDiv.querySelector('.remove-ingredient').addEventListener('click', function() {
                container.removeChild(ingredientDiv);
            });
        }

        // Switch between tabs
        function switchTab(e) {
            const tab = e.target.dataset.tab;
            
            // Update active tab button
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });
            e.target.classList.add('active');
            
            // Show the selected tab
            if (tab === 'receipt') {
                document.getElementById('receipt-panel').classList.remove('hidden');
                document.getElementById('history-panel').classList.add('hidden');
            } else if (tab === 'history') {
                document.getElementById('receipt-panel').classList.add('hidden');
                document.getElementById('history-panel').classList.remove('hidden');
            }
        }

        // Set up payment method selection
        function setupPaymentMethods() {
            const paymentMethods = document.querySelectorAll('.payment-method');
            
            // Set initial selected state
            document.querySelector(`.payment-method[data-method="${selectedPaymentMethod}"]`).classList.add('selected');
            
            paymentMethods.forEach(method => {
                method.addEventListener('click', function() {
                    // Remove selected class from all methods
                    paymentMethods.forEach(m => m.classList.remove('selected'));
                    
                    // Add selected class to clicked method
                    this.classList.add('selected');
                    
                    // Update selected payment method
                    selectedPaymentMethod = this.dataset.method;
                    saveSettings();
                    
                    // Update receipt preview
                    document.getElementById('receipt-payment-method').textContent = 
                        selectedPaymentMethod === 'cash' ? 'Cash' : 
                        selectedPaymentMethod === 'card' ? 'Credit/Debit Card' : 
                        'GCash/Maya';
                });
            });
        }

        // Update current time display
        function updateCurrentTime() {
            const now = new Date();
            const options = { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            };
            document.getElementById('current-time').textContent = now.toLocaleDateString('en-US', options);
        }

        // Render menu items
        function renderMenuItems(filter = 'all', searchTerm = '') {
            const menuItemsContainer = document.getElementById('menu-items');
            menuItemsContainer.innerHTML = '';
            
            let filteredItems = menuItems;

            // Filter by category
            if (filter !== 'all') {
                filteredItems = menuItems.filter(item => item.category === filter);
            }

            // Filter by search term
            if (searchTerm) {
                const term = searchTerm.toLowerCase();
                filteredItems = filteredItems.filter(item => 
                    item.name.toLowerCase().includes(term) ||
                    item.category.toLowerCase().includes(term)
                );
            }

            // Render items
            filteredItems.forEach(item => {
                const itemElement = document.createElement('div');
                itemElement.className = 'flex justify-between items-center p-3 border-b hover:bg-gray-50 cursor-pointer';
                itemElement.dataset.id = item.id;

                // Add low stock warning if applicable
                const stockWarning = item.stock <= item.alert ? 
                    `<span class="text-xs ${item.stock === 0 ? 'text-red-600' : 'text-yellow-600'} font-medium">
                        ${item.stock === 0 ? 'Out of stock' : 'Low stock'}
                    </span>` : '';

                itemElement.innerHTML = `
                    <div>
                        <div class="font-medium">${item.name}</div>
                        <div class="text-xs text-gray-500">${formatCategory(item.category)}</div>
                        ${stockWarning}
                    </div>
                    <div class="font-bold text-blue-700">$${item.price.toFixed(2)}</div>
                `;

                // Only allow adding if in stock
                if (item.stock > 0) {
                    itemElement.addEventListener('click', () => addToOrder(item.id));
                } else {
                    itemElement.classList.add('opacity-50');
                }

                menuItemsContainer.appendChild(itemElement);
            });

            // Show message if no items found
            if (filteredItems.length === 0) {
                const noItemsElement = document.createElement('div');
                noItemsElement.className = 'text-center py-4 text-gray-500';
                noItemsElement.textContent = 'No items found';
                menuItemsContainer.appendChild(noItemsElement);
            }
        }

        // Format category for display
        function formatCategory(category) {
            return category.charAt(0).toUpperCase() + category.slice(1);
        }

        // Add item to order
        function addToOrder(itemId) {
            const item = menuItems.find(i => i.id === itemId);
            
            if (!item) return;

            // Check if item already exists in order
            const existingItem = currentOrder.find(i => i.id === itemId);

            if (existingItem) {
                existingItem.quantity += 1;
            } else {
                currentOrder.push({
                    id: item.id,
                    name: item.name,
                    price: item.price,
                    quantity: 1
                });
            }

            // Save order
            saveCurrentOrder();

            // Update UI
            renderOrderItems();
            updateOrderSummary();
        }

        // Render order items
        function renderOrderItems() {
            const orderItemsContainer = document.getElementById('order-items');
            orderItemsContainer.innerHTML = '';

            if (currentOrder.length === 0) {
                const emptyElement = document.createElement('div');
                emptyElement.className = 'text-center py-4 text-gray-500';
                emptyElement.textContent = 'No items in order';
                orderItemsContainer.appendChild(emptyElement);
                return;
            }

            currentOrder.forEach((item, index) => {
                const itemElement = document.createElement('div');
                itemElement.className = 'grid grid-cols-6 gap-1';

                itemElement.innerHTML = `
                    <div class="grid-cell flex items-center justify-center">
                        <button class="decrease-qty px-2 text-gray-500 hover:text-gray-700" data-index="${index}">
                            <i class="fas fa-minus"></i>
                        </button>
                        <span class="mx-2">${item.quantity}</span>
                        <button class="increase-qty px-2 text-gray-500 hover:text-gray-700" data-index="${index}">
                            <i class="fas fa-plus"></i>
                        </button>
                    </div>
                    <div class="grid-cell col-span-3">${item.name}</div>
                    <div class="grid-cell">$${item.price.toFixed(2)}</div>
                    <div class="grid-cell">$${(item.price * item.quantity).toFixed(2)}</div>
                `;

                orderItemsContainer.appendChild(itemElement);
            });

            // Add event listeners for quantity buttons
            document.querySelectorAll('.decrease-qty').forEach(btn => {
                btn.addEventListener('click', function() {
                    const index = parseInt(this.dataset.index);
                    decreaseQuantity(index);
                });
            });

            document.querySelectorAll('.increase-qty').forEach(btn => {
                btn.addEventListener('click', function() {
                    const index = parseInt(this.dataset.index);
                    increaseQuantity(index);
                });
            });
        }

        // Decrease item quantity
        function decreaseQuantity(index) {
            if (currentOrder[index].quantity > 1) {
                currentOrder[index].quantity -= 1;
            } else {
                currentOrder.splice(index, 1);
            }

            // Save order
            saveCurrentOrder();

            renderOrderItems();
            updateOrderSummary();
        }

        // Increase item quantity
        function increaseQuantity(index) {
            currentOrder[index].quantity += 1;
            
            // Save order
            saveCurrentOrder();

            renderOrderItems();
            updateOrderSummary();
        }

        // Update order summary (total only, no tax)
        function updateOrderSummary() {
            const total = currentOrder.reduce((sum, item) => sum + (item.price * item.quantity), 0);

            document.getElementById('total').textContent = `$${total.toFixed(2)}`;

            // Update receipt preview
            document.getElementById('receipt-total').textContent = `$${total.toFixed(2)}`;

            renderReceiptItems();
        }

        // Render receipt items
        function renderReceiptItems() {
            const receiptItemsContainer = document.getElementById('receipt-items');
            receiptItemsContainer.innerHTML = '';

            currentOrder.forEach(item => {
                const itemElement = document.createElement('div');
                itemElement.className = 'flex justify-between mb-1';

                itemElement.innerHTML = `
                    <div>
                        <span>${item.quantity}x</span>
                        <span class="ml-2">${item.name}</span>
                    </div>
                    <div>$${(item.price * item.quantity).toFixed(2)}</div>
                `;

                receiptItemsContainer.appendChild(itemElement);
            });
        }

        // Clear current order
        function clearOrder() {
            currentOrder = [];
            
            // Save order
            saveCurrentOrder();

            renderOrderItems();
            updateOrderSummary();
        }

        // Deduct ingredients from inventory when an order is placed
        function deductIngredients(order) {
            order.forEach(orderItem => {
                const menuItem = menuItems.find(item => item.id === orderItem.id);
                if (menuItem && menuItem.ingredients) {
                    menuItem.ingredients.forEach(ingredient => {
                        const inventoryItem = ingredients.find(i => i.name === ingredient.name);
                        if (inventoryItem) {
                            inventoryItem.stock -= ingredient.quantity * orderItem.quantity;
                            if (inventoryItem.stock < 0) inventoryItem.stock = 0;
                        }
                    });
                }
            });

            // Save updated ingredients inventory
            saveIngredients();
            renderIngredients();
        }

        // Checkout order
        function checkoutOrder() {
            if (currentOrder.length === 0) {
                alert('Please add items to the order before checkout.');
                return;
            }

            // First check if we have enough ingredients
            let canProceed = true;
            let missingIngredients = [];
            
            currentOrder.forEach(orderItem => {
                const menuItem = menuItems.find(item => item.id === orderItem.id);
                if (menuItem && menuItem.ingredients) {
                    menuItem.ingredients.forEach(ingredient => {
                        const inventoryItem = ingredients.find(i => i.name === ingredient.name);
                        if (!inventoryItem || inventoryItem.stock < (ingredient.quantity * orderItem.quantity)) {
                            canProceed = false;
                            missingIngredients.push({
                                name: ingredient.name,
                                required: ingredient.quantity * orderItem.quantity,
                                available: inventoryItem ? inventoryItem.stock : 0
                            });
                        }
                    });
                }
            });

            if (!canProceed) {
                let alertMessage = "Not enough ingredients to complete this order:\n";
                missingIngredients.forEach(ing => {
                    alertMessage += `\n${ing.name}: Need ${ing.required}, have ${ing.available}`;
                });
                alert(alertMessage);
                return;
            }

            // Create transaction record
            const transaction = {
                id: orderNumber,
                date: new Date().toISOString(),
                items: [...currentOrder],
                paymentMethod: selectedPaymentMethod,
                total: currentOrder.reduce((sum, item) => sum + (item.price * item.quantity), 0)
            };

            // Add to history
            transactionHistory.unshift(transaction); // Add to beginning of array
            saveTransactionHistory();

            // Update inventory (reduce stock)
            currentOrder.forEach(orderItem => {
                const menuItem = menuItems.find(item => item.id === orderItem.id);
                if (menuItem) {
                    menuItem.stock -= orderItem.quantity;
                    if (menuItem.stock < 0) menuItem.stock = 0;
                }
            });

            // Deduct ingredients
            deductIngredients(currentOrder);

            // Save updated inventory
            saveMenuItems();

            // Increment order number
            orderNumber++;
            saveOrderNumber();

            // Update UI
            renderMenuItems();
            renderInventoryItems();
            renderIngredients();
            updateInventorySummary();
            renderHistoryItems();

            // Set receipt details
            const now = new Date();
            document.getElementById('receipt-date').textContent = now.toLocaleString();
            document.getElementById('receipt-order-number').textContent = transaction.id;
            
            // Update payment method on receipt
            document.getElementById('receipt-payment-method').textContent = 
                selectedPaymentMethod === 'cash' ? 'Cash' : 
                selectedPaymentMethod === 'card' ? 'Credit/Debit Card' : 
                'GCash/Maya';

            // Show receipt in print preview
            setTimeout(() => {
                document.getElementById('print-receipt').click();
            }, 500);

            // Clear order after checkout
            clearOrder();
        }

        // Print receipt
        function printReceipt() {
            const receiptContent = document.getElementById('receipt-content').innerHTML;
            const originalContent = document.body.innerHTML;

            document.body.innerHTML = `
                <div class="receipt p-4" style="width: 300px; margin: 0 auto;">
                    ${receiptContent}
                </div>
            `;

            window.print();
            document.body.innerHTML = originalContent;

            // Reinitialize the app after print
            initApp();
        }

        // Show inventory panel
        function showInventoryPanel() {
            document.getElementById('receipt-panel').classList.add('hidden');
            document.getElementById('history-panel').classList.add('hidden');
            document.getElementById('inventory-panel').classList.remove('hidden');
        }

        // Show receipt panel
        function showReceiptPanel() {
            document.getElementById('inventory-panel').classList.add('hidden');
            document.getElementById('history-panel').classList.add('hidden');
            document.getElementById('receipt-panel').classList.remove('hidden');
            
            // Set receipt tab as active
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });
            document.querySelector('.tab-button[data-tab="receipt"]').classList.add('active');
        }

        // Render inventory items
        function renderInventoryItems() {
            const inventoryItemsContainer = document.getElementById('inventory-items');
            inventoryItemsContainer.innerHTML = '';

            menuItems.forEach(item => {
                const itemElement = document.createElement('div');
                itemElement.className = 'grid grid-cols-8 gap-1';

                // Determine stock status
                let stockStatus = '';
                if (item.stock === 0) {
                    stockStatus = '<span class="text-red-600">Out of stock</span>';
                } else if (item.stock <= item.alert) {
                    stockStatus = '<span class="text-yellow-600">Low stock</span>';
                } else {
                    stockStatus = '<span class="text-green-600">In stock</span>';
                }

                itemElement.innerHTML = `
                    <div class="grid-cell">${item.id}</div>
                    <div class="grid-cell col-span-2">${item.name}</div>
                    <div class="grid-cell">${formatCategory(item.category)}</div>
                    <div class="grid-cell">$${item.price.toFixed(2)}</div>
                    <div class="grid-cell">${item.stock}</div>
                    <div class="grid-cell">${stockStatus}</div>
                    <div class="grid-cell flex space-x-1">
                        <button class="edit-item px-2 text-blue-600 hover:text-blue-800" data-id="${item.id}">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="delete-item px-2 text-red-600 hover:text-red-800" data-id="${item.id}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                `;

                inventoryItemsContainer.appendChild(itemElement);
            });

            // Add event listeners for edit and delete buttons
            document.querySelectorAll('.edit-item').forEach(btn => {
                btn.addEventListener('click', function() {
                    const itemId = parseInt(this.dataset.id);
                    editInventoryItem(itemId);
                });
            });

            document.querySelectorAll('.delete-item').forEach(btn => {
                btn.addEventListener('click', function() {
                    const itemId = parseInt(this.dataset.id);
                    deleteInventoryItem(itemId);
                });
            });

            // Update low stock items
            updateLowStockItems();
        }

        // Render ingredients
        function renderIngredients() {
            const ingredientsContainer = document.getElementById('ingredients-items');
            ingredientsContainer.innerHTML = '';

            if (ingredients.length === 0) {
                const emptyElement = document.createElement('div');
                emptyElement.className = 'text-center py-4 text-gray-500';
                emptyElement.textContent = 'No ingredients in inventory';
                ingredientsContainer.appendChild(emptyElement);
                return;
            }

            ingredients.forEach(ingredient => {
                const ingredientElement = document.createElement('div');
                ingredientElement.className = 'grid grid-cols-4 gap-1';

                // Determine stock status
                let stockStatus = '';
                if (ingredient.stock === 0) {
                    stockStatus = '<span class="text-red-600">Out of stock</span>';
                } else if (ingredient.stock <= ingredient.alert) {
                    stockStatus = '<span class="text-yellow-600">Low stock</span>';
                } else {
                    stockStatus = '<span class="text-green-600">In stock</span>';
                }

                ingredientElement.innerHTML = `
                    <div class="grid-cell">${ingredient.name}</div>
                    <div class="grid-cell">${ingredient.stock} ${ingredient.unit}</div>
                    <div class="grid-cell">${stockStatus}</div>
                    <div class="grid-cell">
                        <button class="restock-btn px-2 text-blue-600 hover:text-blue-800" data-id="${ingredient.id}">
                            <i class="fas fa-plus"></i> Restock
                        </button>
                    </div>
                `;

                ingredientsContainer.appendChild(ingredientElement);
            });

            // Add event listeners for restock buttons
            document.querySelectorAll('.restock-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const ingredientId = parseInt(this.dataset.id);
                    restockIngredient(ingredientId);
                });
            });
        }

        // Restock ingredient
        function restockIngredient(ingredientId) {
            const ingredient = ingredients.find(i => i.id === ingredientId);
            if (!ingredient) return;

            const restockAmount = parseInt(prompt(`Enter restock amount for ${ingredient.name} (${ingredient.unit}):`, 0));
            if (!isNaN(restockAmount) && restockAmount > 0) {
                ingredient.stock += restockAmount;
                saveIngredients();
                renderIngredients();
            }
        }

        // Update low stock items
        function updateLowStockItems() {
            const lowStockItems = menuItems.filter(item => item.stock <= item.alert);
            const lowStockItemsContainer = document.getElementById('low-stock-items');

            lowStockItemsContainer.innerHTML = '';

            if (lowStockItems.length === 0) {
                lowStockItemsContainer.innerHTML = '<p class="text-gray-500">No low stock items</p>';
                return;
            }

            lowStockItems.forEach(item => {
                const itemElement = document.createElement('div');
                itemElement.className = 'flex justify-between items-center mb-2';

                itemElement.innerHTML = `
                    <span>${item.name}</span>
                    <span class="font-medium ${item.stock === 0 ? 'text-red-600' : 'text-yellow-600'}">
                        ${item.stock} left (alert at ${item.alert})
                    </span>
                `;

                lowStockItemsContainer.appendChild(itemElement);
            });
        }

        // Update inventory summary
        function updateInventorySummary() {
            const totalItems = menuItems.length;
            const outOfStock = menuItems.filter(item => item.stock === 0).length;
            const lowStock = menuItems.filter(item => item.stock > 0 && item.stock <= item.alert).length;

            document.getElementById('total-items').textContent = totalItems;
            document.getElementById('out-of-stock').textContent = outOfStock;
            document.getElementById('low-stock').textContent = lowStock;
        }

        // Show add item modal
        function showAddItemModal() {
            currentEditingItem = null;
            document.getElementById('modal-title').textContent = 'Add Inventory Item';
            document.getElementById('inventory-form').reset();
            document.getElementById('item-id').value = '';
            document.getElementById('ingredients-container').innerHTML = '';
            document.getElementById('inventory-modal').classList.remove('hidden');
        }

        // Edit inventory item
        function editInventoryItem(itemId) {
            const item = menuItems.find(i => i.id === itemId);
            if (!item) return;

            currentEditingItem = item;
            document.getElementById('modal-title').textContent = 'Edit Inventory Item';

            // Fill form with item data
            document.getElementById('item-id').value = item.id;
            document.getElementById('item-name').value = item.name;
            document.getElementById('item-category').value = item.category;
            document.getElementById('item-price').value = item.price;
            document.getElementById('item-cost').value = item.price * 0.7; // Sample cost calculation
            document.getElementById('item-stock').value = item.stock;
            document.getElementById('item-alert').value = item.alert;

            // Clear existing ingredient fields
            const ingredientsContainer = document.getElementById('ingredients-container');
            ingredientsContainer.innerHTML = '';

            // Add ingredient fields
            if (item.ingredients && item.ingredients.length > 0) {
                item.ingredients.forEach(ingredient => {
                    addIngredientField(ingredient);
                });
            }

            document.getElementById('inventory-modal').classList.remove('hidden');
        }

        // Close modal
        function closeModal() {
            document.getElementById('inventory-modal').classList.add('hidden');
        }

        // Save inventory item
        function saveInventoryItem() {
            const id = document.getElementById('item-id').value;
            const name = document.getElementById('item-name').value.trim();
            const category = document.getElementById('item-category').value;
            const price = parseFloat(document.getElementById('item-price').value);
            const cost = parseFloat(document.getElementById('item-cost').value);
            const stock = parseInt(document.getElementById('item-stock').value);
            const alert = parseInt(document.getElementById('item-alert').value);

            // Validate inputs
            if (!name || isNaN(price) || isNaN(stock) || isNaN(alert)) {
                alert('Please fill in all fields with valid values.');
                return;
            }

            // Get ingredients from form
            const ingredientsContainer = document.getElementById('ingredients-container');
            const ingredientFields = ingredientsContainer.querySelectorAll('.ingredient-name');
            const itemIngredients = [];
            
            ingredientFields.forEach(field => {
                const ingredientDiv = field.closest('[data-id]');
                const ingredientName = field.value;
                const quantityInput = ingredientDiv.querySelector('.ingredient-quantity');
                const quantity = parseFloat(quantityInput.value);
                
                if (ingredientName && !isNaN(quantity) && quantity > 0) {
                    itemIngredients.push({
                        name: ingredientName,
                        quantity: quantity
                    });
                }
            });

            if (currentEditingItem) {
                // Update existing item
                currentEditingItem.name = name;
                currentEditingItem.category = category;
                currentEditingItem.price = price;
                currentEditingItem.stock = stock;
                currentEditingItem.alert = alert;
                currentEditingItem.ingredients = itemIngredients;
            } else {
                // Add new item
                const newId = menuItems.length > 0 ? Math.max(...menuItems.map(i => i.id)) + 1 : 1;
                menuItems.push({
                    id: newId,
                    name,
                    category,
                    price,
                    stock,
                    alert,
                    ingredients: itemIngredients
                });
            }

            // Save inventory
            saveMenuItems();

            // Update UI
            renderMenuItems();
            renderInventoryItems();
            updateInventorySummary();
            closeModal();
        }

        // Delete inventory item
        function deleteInventoryItem(itemId) {
            if (confirm('Are you sure you want to delete this item?')) {
                menuItems = menuItems.filter(item => item.id !== itemId);
                
                // Save inventory
                saveMenuItems();

                renderMenuItems();
                renderInventoryItems();
                updateInventorySummary();
            }
        }

        // Filter menu items by category
        function filterByCategory(e) {
            const category = e.target.dataset.category;
            document.querySelectorAll('.category-btn').forEach(btn => {
                btn.classList.remove('bg-amber-200');
                btn.classList.add('bg-amber-100');
            });
            e.target.classList.remove('bg-amber-100');
            e.target.classList.add('bg-amber-200');
            renderMenuItems(category, document.getElementById('menu-search').value);
        }

        // Filter menu items by search term
        function filterMenuItems() {
            const searchTerm = document.getElementById('menu-search').value;
            const activeCategory = document.querySelector('.category-btn.bg-amber-200');
            const category = activeCategory ? activeCategory.dataset.category : 'all';
            renderMenuItems(category, searchTerm);
        }

        // Render receipt
        function renderReceipt() {
            const now = new Date();
            document.getElementById('receipt-date').textContent = now.toLocaleString();
            document.getElementById('receipt-order-number').textContent = orderNumber;
            
            // Set default payment method on receipt
            document.getElementById('receipt-payment-method').textContent = 'Cash';
        }

        // Render transaction history
        function renderHistoryItems() {
            const historyItemsContainer = document.getElementById('history-items');
            historyItemsContainer.innerHTML = '';

            if (transactionHistory.length === 0) {
                const emptyElement = document.createElement('div');
                emptyElement.className = 'text-center py-4 text-gray-500';
                emptyElement.textContent = 'No transaction history yet';
                historyItemsContainer.appendChild(emptyElement);
                
                // Update pagination controls
                document.getElementById('history-count').textContent = '0';
                document.getElementById('prev-history').disabled = true;
                document.getElementById('next-history').disabled = true;
                return;
            }

            // Calculate pagination
            const startIndex = (historyPage - 1) * HISTORY_PER_PAGE;
            const endIndex = Math.min(startIndex + HISTORY_PER_PAGE, transactionHistory.length);
            const paginatedHistory = transactionHistory.slice(startIndex, endIndex);

            // Render history items
            paginatedHistory.forEach(transaction => {
                const transactionDate = new Date(transaction.date);
                const itemCount = transaction.items.reduce((sum, item) => sum + item.quantity, 0);

                const historyElement = document.createElement('div');
                historyElement.className = 'grid grid-cols-6 gap-1 history-item cursor-pointer';
                historyElement.dataset.id = transaction.id;

                historyElement.innerHTML = `
                    <div class="grid-cell text-xs">${transactionDate.toLocaleDateString()}</div>
                    <div class="grid-cell font-medium">${transaction.id}</div>
                    <div class="grid-cell">${itemCount} items</div>
                    <div class="grid-cell">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                            transaction.paymentMethod === 'cash' ? 'bg-green-100 text-green-800' : 
                            transaction.paymentMethod === 'card' ? 'bg-blue-100 text-blue-800' : 
                            'bg-purple-100 text-purple-800'
                        }">
                            ${transaction.paymentMethod === 'cash' ? 'Cash' : 
                              transaction.paymentMethod === 'card' ? 'Card' : 
                              'GCash/Maya'}
                        </span>
                    </div>
                    <div class="grid-cell font-bold">$${transaction.total.toFixed(2)}</div>
                    <div class="grid-cell">
                        <button class="view-receipt px-2 text-blue-600 hover:text-blue-800" data-id="${transaction.id}">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                `;

                historyItemsContainer.appendChild(historyElement);
            });

            // Add event listeners for view receipt buttons
            document.querySelectorAll('.view-receipt').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.stopPropagation();
                    const transactionId = parseInt(this.dataset.id);
                    viewReceipt(transactionId);
                });
            });

            // Add event listener for entire history item
            document.querySelectorAll('.history-item').forEach(item => {
                item.addEventListener('click', function() {
                    const transactionId = parseInt(this.dataset.id);
                    viewReceipt(transactionId);
                });
            });

            // Update pagination controls
            document.getElementById('history-count').textContent = `${startIndex + 1}-${endIndex} of ${transactionHistory.length}`;
            document.getElementById('prev-history').disabled = historyPage === 1;
            document.getElementById('next-history').disabled = endIndex >= transactionHistory.length;
        }

        // View receipt from history
        function viewReceipt(transactionId) {
            const transaction = transactionHistory.find(t => t.id === transactionId);
            if (!transaction) return;

            const transactionDate = new Date(transaction.date);
            
            // Populate receipt modal
            const modalReceiptContent = document.getElementById('modal-receipt-content');
            modalReceiptContent.innerHTML = `
                <div class="text-center mb-4">
                    <h3 class="font-bold text-lg">Croffle Corner </h3>
                    <p class="text-sm">123 Brew Street, Caffeine City</p>
                    <p class="text-sm">Tel: (555) 123-4567</p>
                </div>
                <div class="border-b border-gray-300 mb-2"></div>
                <div class="text-xs mb-2">
                    <div class="flex justify-between">
                        <span>Date:</span>
                        <span>${transactionDate.toLocaleString()}</span>
                    </div>
                    <div class="flex justify-between">
                        <span>Order #:</span>
                        <span>${transaction.id}</span>
                    </div>
                    <div class="flex justify-between">
                        <span>Payment Method:</span>
                        <span>${
                            transaction.paymentMethod === 'cash' ? 'Cash' : 
                            transaction.paymentMethod === 'card' ? 'Credit/Debit Card' : 
                            'GCash/Maya'
                        }</span>
                    </div>
                </div>
                <div class="border-b border-gray-300 mb-2"></div>
                <div class="text-xs mb-4">
                    ${transaction.items.map(item => `
                        <div class="flex justify-between mb-1">
                            <div>
                                <span>${item.quantity}x</span>
                                <span class="ml-2">${item.name}</span>
                            </div>
                            <div>$${(item.price * item.quantity).toFixed(2)}</div>
                        </div>
                    `).join('')}
                </div>
                <div class="border-b border-gray-300 mb-2"></div>
                <div class="text-xs mb-2">
                    <div class="flex justify-between font-bold">
                        <span>Total:</span>
                        <span>$${transaction.total.toFixed(2)}</span>
                    </div>
                </div>
                <div class="text-center mt-4 text-xs">
                    <p>Thank you for visiting!</p>
                    <p>Please come again</p>
                </div>
            `;

            // Set print button to print this receipt
            document.getElementById('print-modal-receipt').dataset.id = transaction.id;

            // Show modal
            document.getElementById('receipt-modal').classList.remove('hidden');
        }

        // Print modal receipt
        function printModalReceipt() {
            const receiptContent = document.getElementById('modal-receipt-content').innerHTML;
            const originalContent = document.body.innerHTML;

            document.body.innerHTML = `
                <div class="receipt p-4" style="width: 300px; margin: 0 auto;">
                    ${receiptContent}
                </div>
            `;

            window.print();
            document.body.innerHTML = originalContent;

            // Reinitialize the app after print
            initApp();
        }

        // Close receipt modal
        function closeReceiptModal() {
            document.getElementById('receipt-modal').classList.add('hidden');
        }

        // Navigate to previous history page
        function prevHistoryPage() {
            if (historyPage > 1) {
                historyPage--;
                renderHistoryItems();
            }
        }

        // Navigate to next history page
        function nextHistoryPage() {
            const totalPages = Math.ceil(transactionHistory.length / HISTORY_PER_PAGE);
            if (historyPage < totalPages) {
                historyPage++;
                renderHistoryItems();
            }
        }
    </script>
</body>
</html>
